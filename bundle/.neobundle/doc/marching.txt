*marching.txt* *marching*	Asynchronous code completion for C and C++



==============================================================================
INTRODUCTION						*marching-introduction*

*marching.vim* is a Vim plugin to complete C, C++ code using Clang, a
C/C++/Objective-C front end for LLVM.

- Requirements
    - Executable
      Clang        - http://clang.llvm.org/

    - Plugin
      vimproc.vim  - https://github.com/Shougo/vimproc.vim
      reunions.vim - https://github.com/osyo-manga/vim-reunions


==============================================================================
USAGE						*marching-usage*

Execute code completion with <C-x><C-o>.
The completion is executed asynchronously and a popup menu will be
automatically opened after the completion has been completed at
|CursorHoldI|.
Additionally, the completion is not updated while the popup menu is
displayed. You can input while processing the completion.

Example: >
	" path to clang command
	let g:marching_clang_command = "C:/clang.exe"

	" directory paths to include
	let g:marching_include_paths = [
	\	"C:/MinGW/lib/gcc/mingw32/4.6.2/include/c++"
	\	"C:/cpp/boost"
	\]

	" cooperate with neocomplete.vim
	let g:marching_enable_neocomplete = 1

	if !exists('g:neocomplete#force_omni_input_patterns')
	  let g:neocomplete#force_omni_input_patterns = {}
	endif

	let g:neocomplete#force_omni_input_patterns.cpp =
		\ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
<
|marching.vim| may not detect the standard header files in some environments.  In
the case, you should set a proper include directory path to
|g:marching_include_paths|.


==============================================================================
CACHING						*marching-caching*

In |marching.vim|, the previous results of completion like names of variables
are cached as dictionary and they will be used at next completion.  The cache
is buffer local. So, note that, if the name of completion candidate is the
same as one of cache, the cache will be used even if the scope is different.

Example: >
	void
	func1(){
		Hoge x;
		x.
	}

	void
	func2(){
		Foo x;
		x.	// completion cache in func1() may be used
	}
<
This cache remains as long as you don't delete it manually.
If you want to refresh candidates of completion, use
|<Plug>(marching_force_start_omni_complete)|.  You can also delete all cache
using |:MarchingBufferClearCache|.


==============================================================================
INTERFACE				*marching-interface*

------------------------------------------------------------------------------
COMMANDS					*marching-commands*

:MarchingBufferClearCache			*:MarchingBufferClearCache*
	Clear cache in the buffer.

:MarchingDebugLog				*:MarchingDebugLog*
	Echo debug log.
	If you set |g:marching_debug| to 1, the log output in this command
	would be recorded.

------------------------------------------------------------------------------
FUNCTIONS					*marching-functions*

------------------------------------------------------------------------------
MAPPINGS					*marching-key-mappings*

<Plug>(marching_start_omni_complete)		*<Plug>(marching_start_omni_complete)*
	Execute omni completion.
	The completion word would not be inserted at the cursor.

					*<Plug>(marching_force_start_omni_complete)*
<Plug>(marching_force_start_omni_complete)
	The same as |<Plug>(marching_start_omni_complete)| except for
	refreshing the completion information.
	See |marching-caching| for more detail.


==============================================================================
SETTING						*marching-setting*

------------------------------------------------------------------------------
VARIABLES						*marching-variables*

g:marching_clang_command				*g:marching_clang_command*
	Path to clang command.
Default value is: >
	let g:marching_clang_command = "clang"
<

g:marching_clang_command_option			*g:marching_clang_command_option*
	Command line options for|g:marching_clang_command|.
Default value is: >
	let g:marching_clang_command_option = ""
<

g:marching_wait_time				*g:marching_wait_time*
	Wait time for executing the command at first. The unit is second and the
	value is floating point.
	If the process of completion has been done in |g:marching_wait_time|
	seconds, a popup menu will be opened immediately.
Default value is: >
	let g:marching_wait_time = 0.5
<

g:marching_enable_auto_select			*g:marching_enable_auto_select*
	If this value is equivalent to 1, first completion item is selected
	automatically. If the value is equivalent to 0, no item is selected.
Default value is: >
	let g:marching_enable_auto_select = 0
<

g:marching_include_paths			*g:marching_include_paths*
	This is |List| of path strings to include. Clang also includes directories
	in 'path' as include directories.
Default value is: >
	let g:marching_include_paths = []
<
	In Linux environment, some include directories are not detected
	correctly.  If you want to use the standard header files for C, C++,
	you should set include directory paths as following.
Example: >
	let g:marching_include_paths = filter(
	\	split(glob('/usr/include/c++/*'), '\n') +
	\	split(glob('/usr/include/*/c++/*'), '\n') +
	\	split(glob('/usr/include/*/'), '\n'),
	\	'isdirectory(v:val)')
<

g:marching_enable_neocomplete			*g:marching_enable_neocomplete*
	If you use |vim-marching| with |neocomplete|, you need to set this value
	to 1.
Default value is: >
	let g:marching_enable_neocomplete = 0
<
b:marching_clang_command			*b:marching_clang_command*
	This is buffer local version of |g:marching_clang_command|.
	If this value exists in a buffer, the value is used instead of
	|g:marching_clang_command| in the buffer.

b:marching_clang_command_option			*b:marching_clang_command_option*
	This is buffer local version of |g:marching_clang_command_option|.
	If this value exists in a buffer, the value is used instead of
	|g:marching_clang_command_option| in the buffer.

g:marching_debug				*g:marching_debug*
	If this value is set to 1, the log for debug is recorded.  You can
	check the log with |:MarchingDebugLog|.
Default: >
	let g:marching_debug = 0
<

g:marching_backend				*g:marching_backend*
	This variable controls the process of completion.
	Below strings are allowed as this variable's value.
	
	"clang_command"      : Do code completion asynchronously.
	"sync_clang_command" : Do code completion synchronously.  If this
	                       value is set, |marching.vim| doesn't have
	                       dependencies on |reunions| and |vimproc|.
Default: >
	let g:marching_backend = "clang_command"
<

g:marching_enable_refresh_always		*g:marching_enable_refresh_always*
	If this value is set to 1, a completion function is called every key
	input.  It is also useful when you want to update the process at other
	completion window running.
	Note that a completion window may flicker.
Default: >
	let g:marching_enable_refresh_always = 0
<

==============================================================================
EXAMPLE						*marching-example*



==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
